// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VariantSubType struct {
	_tab flatbuffers.Table
}

func GetRootAsVariantSubType(buf []byte, offset flatbuffers.UOffsetT) *VariantSubType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VariantSubType{}
	x.Init(buf, n+offset)
	return x
}

func FinishVariantSubTypeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsVariantSubType(buf []byte, offset flatbuffers.UOffsetT) *VariantSubType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VariantSubType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedVariantSubTypeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *VariantSubType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VariantSubType) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *VariantSubType) Shape(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *VariantSubType) ShapeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VariantSubType) MutateShape(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *VariantSubType) Type() TensorType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return TensorType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VariantSubType) MutateType(n TensorType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *VariantSubType) HasRank() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *VariantSubType) MutateHasRank(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func VariantSubTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func VariantSubTypeAddShape(builder *flatbuffers.Builder, shape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(shape), 0)
}
func VariantSubTypeStartShapeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func VariantSubTypeAddType(builder *flatbuffers.Builder, type_ TensorType) {
	builder.PrependInt8Slot(1, int8(type_), 0)
}
func VariantSubTypeAddHasRank(builder *flatbuffers.Builder, hasRank bool) {
	builder.PrependBoolSlot(2, hasRank, false)
}
func VariantSubTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
