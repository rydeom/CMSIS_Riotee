// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StablehloConvolutionOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsStablehloConvolutionOptions(buf []byte, offset flatbuffers.UOffsetT) *StablehloConvolutionOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StablehloConvolutionOptions{}
	x.Init(buf, n+offset)
	return x
}

func FinishStablehloConvolutionOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStablehloConvolutionOptions(buf []byte, offset flatbuffers.UOffsetT) *StablehloConvolutionOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StablehloConvolutionOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStablehloConvolutionOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StablehloConvolutionOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StablehloConvolutionOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StablehloConvolutionOptions) WindowStrides(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) WindowStridesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateWindowStrides(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloConvolutionOptions) Padding(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) PaddingLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutatePadding(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloConvolutionOptions) LhsDilation(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) LhsDilationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateLhsDilation(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloConvolutionOptions) RhsDilation(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) RhsDilationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateRhsDilation(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloConvolutionOptions) WindowReversal(j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetBool(a + flatbuffers.UOffsetT(j*1))
	}
	return false
}

func (rcv *StablehloConvolutionOptions) WindowReversalLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateWindowReversal(j int, n bool) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateBool(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *StablehloConvolutionOptions) InputBatchDimension() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateInputBatchDimension(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *StablehloConvolutionOptions) InputFeatureDimension() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateInputFeatureDimension(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *StablehloConvolutionOptions) InputSpatialDimensions(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) InputSpatialDimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateInputSpatialDimensions(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloConvolutionOptions) KernelInputFeatureDimension() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateKernelInputFeatureDimension(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *StablehloConvolutionOptions) KernelOutputFeatureDimension() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateKernelOutputFeatureDimension(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *StablehloConvolutionOptions) KernelSpatialDimensions(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) KernelSpatialDimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateKernelSpatialDimensions(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloConvolutionOptions) OutputBatchDimension() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateOutputBatchDimension(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *StablehloConvolutionOptions) OutputFeatureDimension() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateOutputFeatureDimension(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *StablehloConvolutionOptions) OutputSpatialDimensions(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) OutputSpatialDimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateOutputSpatialDimensions(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloConvolutionOptions) FeatureGroupCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateFeatureGroupCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

func (rcv *StablehloConvolutionOptions) BatchGroupCount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutateBatchGroupCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func (rcv *StablehloConvolutionOptions) PrecisionConfig(j int) StablehloPrecisionConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return StablehloPrecisionConfig(rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4)))
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) PrecisionConfigLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloConvolutionOptions) MutatePrecisionConfig(j int, n StablehloPrecisionConfig) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), uint32(n))
	}
	return false
}

func StablehloConvolutionOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func StablehloConvolutionOptionsAddWindowStrides(builder *flatbuffers.Builder, windowStrides flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(windowStrides), 0)
}
func StablehloConvolutionOptionsStartWindowStridesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloConvolutionOptionsAddPadding(builder *flatbuffers.Builder, padding flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(padding), 0)
}
func StablehloConvolutionOptionsStartPaddingVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloConvolutionOptionsAddLhsDilation(builder *flatbuffers.Builder, lhsDilation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lhsDilation), 0)
}
func StablehloConvolutionOptionsStartLhsDilationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloConvolutionOptionsAddRhsDilation(builder *flatbuffers.Builder, rhsDilation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rhsDilation), 0)
}
func StablehloConvolutionOptionsStartRhsDilationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloConvolutionOptionsAddWindowReversal(builder *flatbuffers.Builder, windowReversal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(windowReversal), 0)
}
func StablehloConvolutionOptionsStartWindowReversalVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func StablehloConvolutionOptionsAddInputBatchDimension(builder *flatbuffers.Builder, inputBatchDimension int64) {
	builder.PrependInt64Slot(5, inputBatchDimension, 0)
}
func StablehloConvolutionOptionsAddInputFeatureDimension(builder *flatbuffers.Builder, inputFeatureDimension int64) {
	builder.PrependInt64Slot(6, inputFeatureDimension, 0)
}
func StablehloConvolutionOptionsAddInputSpatialDimensions(builder *flatbuffers.Builder, inputSpatialDimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(inputSpatialDimensions), 0)
}
func StablehloConvolutionOptionsStartInputSpatialDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloConvolutionOptionsAddKernelInputFeatureDimension(builder *flatbuffers.Builder, kernelInputFeatureDimension int64) {
	builder.PrependInt64Slot(8, kernelInputFeatureDimension, 0)
}
func StablehloConvolutionOptionsAddKernelOutputFeatureDimension(builder *flatbuffers.Builder, kernelOutputFeatureDimension int64) {
	builder.PrependInt64Slot(9, kernelOutputFeatureDimension, 0)
}
func StablehloConvolutionOptionsAddKernelSpatialDimensions(builder *flatbuffers.Builder, kernelSpatialDimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(kernelSpatialDimensions), 0)
}
func StablehloConvolutionOptionsStartKernelSpatialDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloConvolutionOptionsAddOutputBatchDimension(builder *flatbuffers.Builder, outputBatchDimension int64) {
	builder.PrependInt64Slot(11, outputBatchDimension, 0)
}
func StablehloConvolutionOptionsAddOutputFeatureDimension(builder *flatbuffers.Builder, outputFeatureDimension int64) {
	builder.PrependInt64Slot(12, outputFeatureDimension, 0)
}
func StablehloConvolutionOptionsAddOutputSpatialDimensions(builder *flatbuffers.Builder, outputSpatialDimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(outputSpatialDimensions), 0)
}
func StablehloConvolutionOptionsStartOutputSpatialDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloConvolutionOptionsAddFeatureGroupCount(builder *flatbuffers.Builder, featureGroupCount int64) {
	builder.PrependInt64Slot(14, featureGroupCount, 0)
}
func StablehloConvolutionOptionsAddBatchGroupCount(builder *flatbuffers.Builder, batchGroupCount int64) {
	builder.PrependInt64Slot(15, batchGroupCount, 0)
}
func StablehloConvolutionOptionsAddPrecisionConfig(builder *flatbuffers.Builder, precisionConfig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(precisionConfig), 0)
}
func StablehloConvolutionOptionsStartPrecisionConfigVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StablehloConvolutionOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
