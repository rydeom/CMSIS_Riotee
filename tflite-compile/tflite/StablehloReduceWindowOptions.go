// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StablehloReduceWindowOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsStablehloReduceWindowOptions(buf []byte, offset flatbuffers.UOffsetT) *StablehloReduceWindowOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StablehloReduceWindowOptions{}
	x.Init(buf, n+offset)
	return x
}

func FinishStablehloReduceWindowOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStablehloReduceWindowOptions(buf []byte, offset flatbuffers.UOffsetT) *StablehloReduceWindowOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StablehloReduceWindowOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStablehloReduceWindowOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StablehloReduceWindowOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StablehloReduceWindowOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StablehloReduceWindowOptions) WindowDimensions(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) WindowDimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) MutateWindowDimensions(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloReduceWindowOptions) WindowStrides(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) WindowStridesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) MutateWindowStrides(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloReduceWindowOptions) BaseDilations(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) BaseDilationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) MutateBaseDilations(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloReduceWindowOptions) WindowDilations(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) WindowDilationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) MutateWindowDilations(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloReduceWindowOptions) Padding(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) PaddingLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) MutatePadding(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloReduceWindowOptions) BodySubgraphIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloReduceWindowOptions) MutateBodySubgraphIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func StablehloReduceWindowOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func StablehloReduceWindowOptionsAddWindowDimensions(builder *flatbuffers.Builder, windowDimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(windowDimensions), 0)
}
func StablehloReduceWindowOptionsStartWindowDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloReduceWindowOptionsAddWindowStrides(builder *flatbuffers.Builder, windowStrides flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(windowStrides), 0)
}
func StablehloReduceWindowOptionsStartWindowStridesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloReduceWindowOptionsAddBaseDilations(builder *flatbuffers.Builder, baseDilations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(baseDilations), 0)
}
func StablehloReduceWindowOptionsStartBaseDilationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloReduceWindowOptionsAddWindowDilations(builder *flatbuffers.Builder, windowDilations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(windowDilations), 0)
}
func StablehloReduceWindowOptionsStartWindowDilationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloReduceWindowOptionsAddPadding(builder *flatbuffers.Builder, padding flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(padding), 0)
}
func StablehloReduceWindowOptionsStartPaddingVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloReduceWindowOptionsAddBodySubgraphIndex(builder *flatbuffers.Builder, bodySubgraphIndex int32) {
	builder.PrependInt32Slot(5, bodySubgraphIndex, 0)
}
func StablehloReduceWindowOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
