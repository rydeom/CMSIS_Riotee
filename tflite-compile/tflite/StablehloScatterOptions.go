// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StablehloScatterOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsStablehloScatterOptions(buf []byte, offset flatbuffers.UOffsetT) *StablehloScatterOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StablehloScatterOptions{}
	x.Init(buf, n+offset)
	return x
}

func FinishStablehloScatterOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStablehloScatterOptions(buf []byte, offset flatbuffers.UOffsetT) *StablehloScatterOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StablehloScatterOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStablehloScatterOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StablehloScatterOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StablehloScatterOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StablehloScatterOptions) IndicesAreSorted() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *StablehloScatterOptions) MutateIndicesAreSorted(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *StablehloScatterOptions) UpdateWindowDims(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloScatterOptions) UpdateWindowDimsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloScatterOptions) MutateUpdateWindowDims(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloScatterOptions) InsertedWindowDims(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloScatterOptions) InsertedWindowDimsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloScatterOptions) MutateInsertedWindowDims(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloScatterOptions) ScatterDimsToOperandDims(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloScatterOptions) ScatterDimsToOperandDimsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloScatterOptions) MutateScatterDimsToOperandDims(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloScatterOptions) IndexVectorDim() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloScatterOptions) MutateIndexVectorDim(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *StablehloScatterOptions) UniqueIndices() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *StablehloScatterOptions) MutateUniqueIndices(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *StablehloScatterOptions) UpdateComputationSubgraphIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloScatterOptions) MutateUpdateComputationSubgraphIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func StablehloScatterOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func StablehloScatterOptionsAddIndicesAreSorted(builder *flatbuffers.Builder, indicesAreSorted bool) {
	builder.PrependBoolSlot(0, indicesAreSorted, false)
}
func StablehloScatterOptionsAddUpdateWindowDims(builder *flatbuffers.Builder, updateWindowDims flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(updateWindowDims), 0)
}
func StablehloScatterOptionsStartUpdateWindowDimsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloScatterOptionsAddInsertedWindowDims(builder *flatbuffers.Builder, insertedWindowDims flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(insertedWindowDims), 0)
}
func StablehloScatterOptionsStartInsertedWindowDimsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloScatterOptionsAddScatterDimsToOperandDims(builder *flatbuffers.Builder, scatterDimsToOperandDims flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(scatterDimsToOperandDims), 0)
}
func StablehloScatterOptionsStartScatterDimsToOperandDimsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloScatterOptionsAddIndexVectorDim(builder *flatbuffers.Builder, indexVectorDim int64) {
	builder.PrependInt64Slot(4, indexVectorDim, 0)
}
func StablehloScatterOptionsAddUniqueIndices(builder *flatbuffers.Builder, uniqueIndices bool) {
	builder.PrependBoolSlot(5, uniqueIndices, false)
}
func StablehloScatterOptionsAddUpdateComputationSubgraphIndex(builder *flatbuffers.Builder, updateComputationSubgraphIndex int32) {
	builder.PrependInt32Slot(6, updateComputationSubgraphIndex, 0)
}
func StablehloScatterOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
