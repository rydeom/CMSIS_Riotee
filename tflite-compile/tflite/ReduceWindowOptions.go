// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReduceWindowOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsReduceWindowOptions(buf []byte, offset flatbuffers.UOffsetT) *ReduceWindowOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReduceWindowOptions{}
	x.Init(buf, n+offset)
	return x
}

func FinishReduceWindowOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsReduceWindowOptions(buf []byte, offset flatbuffers.UOffsetT) *ReduceWindowOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReduceWindowOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedReduceWindowOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ReduceWindowOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReduceWindowOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReduceWindowOptions) ReduceFunction() ReduceWindowFunction {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ReduceWindowFunction(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ReduceWindowOptions) MutateReduceFunction(n ReduceWindowFunction) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func ReduceWindowOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ReduceWindowOptionsAddReduceFunction(builder *flatbuffers.Builder, reduceFunction ReduceWindowFunction) {
	builder.PrependInt32Slot(0, int32(reduceFunction), 0)
}
func ReduceWindowOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
