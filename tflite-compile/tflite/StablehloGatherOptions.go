// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StablehloGatherOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsStablehloGatherOptions(buf []byte, offset flatbuffers.UOffsetT) *StablehloGatherOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StablehloGatherOptions{}
	x.Init(buf, n+offset)
	return x
}

func FinishStablehloGatherOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStablehloGatherOptions(buf []byte, offset flatbuffers.UOffsetT) *StablehloGatherOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StablehloGatherOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStablehloGatherOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StablehloGatherOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StablehloGatherOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StablehloGatherOptions) OffsetDims(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloGatherOptions) OffsetDimsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloGatherOptions) MutateOffsetDims(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloGatherOptions) CollapsedSliceDims(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloGatherOptions) CollapsedSliceDimsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloGatherOptions) MutateCollapsedSliceDims(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloGatherOptions) StartIndexMap(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloGatherOptions) StartIndexMapLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloGatherOptions) MutateStartIndexMap(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloGatherOptions) IndexVectorDim() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StablehloGatherOptions) MutateIndexVectorDim(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *StablehloGatherOptions) SliceSizes(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StablehloGatherOptions) SliceSizesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StablehloGatherOptions) MutateSliceSizes(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *StablehloGatherOptions) IndicesAreSorted() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *StablehloGatherOptions) MutateIndicesAreSorted(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func StablehloGatherOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func StablehloGatherOptionsAddOffsetDims(builder *flatbuffers.Builder, offsetDims flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(offsetDims), 0)
}
func StablehloGatherOptionsStartOffsetDimsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloGatherOptionsAddCollapsedSliceDims(builder *flatbuffers.Builder, collapsedSliceDims flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(collapsedSliceDims), 0)
}
func StablehloGatherOptionsStartCollapsedSliceDimsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloGatherOptionsAddStartIndexMap(builder *flatbuffers.Builder, startIndexMap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(startIndexMap), 0)
}
func StablehloGatherOptionsStartStartIndexMapVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloGatherOptionsAddIndexVectorDim(builder *flatbuffers.Builder, indexVectorDim int64) {
	builder.PrependInt64Slot(3, indexVectorDim, 0)
}
func StablehloGatherOptionsAddSliceSizes(builder *flatbuffers.Builder, sliceSizes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(sliceSizes), 0)
}
func StablehloGatherOptionsStartSliceSizesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StablehloGatherOptionsAddIndicesAreSorted(builder *flatbuffers.Builder, indicesAreSorted bool) {
	builder.PrependBoolSlot(5, indicesAreSorted, false)
}
func StablehloGatherOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
